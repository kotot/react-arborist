#!/bin/sh

set -e  # Exit on error

# Parse arguments
VERSION_TYPE="patch"  # Default to patch version
PUSH_TAG=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --version)
      VERSION_TYPE="$2"
      shift 2
      ;;
    --major)
      VERSION_TYPE="major"
      shift
      ;;
    --minor) 
      VERSION_TYPE="minor"
      shift
      ;;
    --patch)
      VERSION_TYPE="patch"
      shift
      ;;
    --push)
      PUSH_TAG=true
      shift
      ;;
    *)
      # Pass other arguments to npm publish
      NPM_ARGS="$NPM_ARGS $1"
      shift
      ;;
  esac
done

echo "üì¶ Building project..."
yarn build

echo "üìã Copying README..."
cp README.md modules/react-arborist/README.md

echo "üè∑Ô∏è  Updating version ($VERSION_TYPE)..."
cd modules/react-arborist

# Use yarn version instead of npm version in workspace environment
if command -v yarn >/dev/null 2>&1; then
  NEW_VERSION=$(yarn version $VERSION_TYPE --no-git-tag-version 2>/dev/null | grep "New version" | cut -d' ' -f3 || echo "")
  if [ -z "$NEW_VERSION" ]; then
    # Fallback: manually update version using node
    CURRENT_VERSION=$(node -p "require('./package.json').version")
    case $VERSION_TYPE in
      major)
        NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
        ;;
      minor) 
        NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
        ;;
      patch)
        NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
        ;;
    esac
    # Update package.json manually
    node -e "
    const fs = require('fs');
    const pkg = require('./package.json');
    pkg.version = '$NEW_VERSION';
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
    "
    NEW_VERSION="v$NEW_VERSION"
  fi
else
  NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
fi

echo "New version: $NEW_VERSION"
cd ../..

echo "üìù Committing version bump..."
git add modules/react-arborist/package.json
git commit -m "chore: bump version to $NEW_VERSION

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

echo "üè∑Ô∏è  Creating git tag..."
git tag "$NEW_VERSION"

if [ "$PUSH_TAG" = true ]; then
  echo "üì§ Pushing changes and tag to remote..."
  git push origin main
  git push origin "$NEW_VERSION"
fi

echo "üöÄ Publishing to npm..."
cd modules/react-arborist
npm publish $NPM_ARGS
cd ../..

echo "‚úÖ Published $NEW_VERSION successfully!"
echo "üìã Next steps:"
echo "   - Check npm: https://bnpm.byted.org/package/@byted/react-arborist"
if [ "$PUSH_TAG" = false ]; then
  echo "   - Push changes: git push origin main && git push origin $NEW_VERSION"
fi
